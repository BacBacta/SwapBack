#!/usr/bin/env node

/**
 * Script de d√©ploiement du programme buyback avec support Token-2022
 * Utilise les APIs Solana pour cr√©er la transaction de d√©ploiement
 */

const fs = require('fs');
const path = require('path');
const { Connection, PublicKey, Keypair, Transaction, SystemProgram, sendAndConfirmTransaction } = require("@solana/web3.js");
const { BpfLoaderUpgradeable } = require("@solana/web3.js");

// Configuration
const DEVNET_RPC = "https://api.devnet.solana.com";
const PROGRAM_ID = new PublicKey("EoVjmALZdkU3N9uehxVV4n9C6ukRa8QrbZRMHKBD2KUf");

console.log('üöÄ D√©ploiement programme buyback avec support Token-2022');
console.log('==================================================\n');

// Chemins des fichiers
const programKeypairPath = path.join(__dirname, 'target/deploy/swapback_buyback-keypair.json');
const programSoPath = path.join(__dirname, 'target/deploy/swapback_buyback.so');

// Charger la keypair du programme
let programKeypair;
try {
  const keypairData = JSON.parse(fs.readFileSync(programKeypairPath, 'utf8'));
  programKeypair = Keypair.fromSecretKey(new Uint8Array(keypairData));
  console.log('‚úÖ Keypair du programme charg√©e');
  console.log(`   Pubkey: ${programKeypair.publicKey.toBase58()}`);
} catch (error) {
  console.error('‚ùå Erreur chargement keypair:', error.message);
  process.exit(1);
}

// Charger le bytecode
let programData;
try {
  programData = fs.readFileSync(programSoPath);
  console.log('‚úÖ Bytecode charg√©');
  console.log(`   Taille: ${programData.length} bytes`);
} catch (error) {
  console.error('‚ùå Erreur chargement bytecode:', error.message);
  process.exit(1);
}

async function deployProgram() {
  const connection = new Connection(DEVNET_RPC, "confirmed");

  // Charger le wallet authority
  const walletPath = path.join(require('os').homedir(), '.config/solana/id.json');
  let authority;
  try {
    const walletData = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
    authority = Keypair.fromSecretKey(new Uint8Array(walletData));
    console.log(`‚úÖ Wallet authority: ${authority.publicKey.toBase58()}`);
  } catch (error) {
    console.error('‚ùå Erreur chargement wallet:', error.message);
    console.log('   Assurez-vous que ~/.config/solana/id.json existe');
    process.exit(1);
  }

  // V√©rifier le solde
  const balance = await connection.getBalance(authority.publicKey);
  console.log(`üí∞ Solde: ${balance / 1e9} SOL`);

  if (balance < 5 * 1e9) {
    console.log('‚ö†Ô∏è  Solde insuffisant. Il faut au moins 5 SOL pour le d√©ploiement.');
    console.log('   Obtenez un airdrop: solana airdrop 5');
    process.exit(1);
  }

  // V√©rifier si le programme existe d√©j√†
  const programInfo = await connection.getAccountInfo(PROGRAM_ID);
  if (!programInfo) {
    console.log('‚ùå Programme non trouv√©. D√©ploiement initial requis.');
    console.log('   Utilisez Solana CLI:');
    console.log(`   solana program deploy --program-id ${programKeypairPath} ${programSoPath}`);
    return;
  }

  console.log('‚úÖ Programme trouv√©, pr√©paration mise √† jour...');

  // Pour la mise √† jour, nous avons besoin du ProgramData account
  // Calculer l'adresse du ProgramData account
  const [programDataAddress] = PublicKey.findProgramAddressSync(
    [PROGRAM_ID.toBuffer()],
    new PublicKey("BPFLoaderUpgradeab1e11111111111111111111111")
  );

  console.log(`üìç ProgramData: ${programDataAddress.toBase58()}`);

  // Cr√©er l'instruction de mise √† jour
  const upgradeInstruction = {
    programId: new PublicKey("BPFLoaderUpgradeab1e11111111111111111111111"),
    keys: [
      { pubkey: programDataAddress, isSigner: false, isWritable: true },
      { pubkey: PROGRAM_ID, isSigner: false, isWritable: true },
      { pubkey: authority.publicKey, isSigner: true, isWritable: false },
      { pubkey: new PublicKey("11111111111111111111111111111112"), isSigner: false, isWritable: false }, // Clock
      { pubkey: new PublicKey("SysvarRent111111111111111111111111111111111"), isSigner: false, isWritable: false }, // Rent
    ],
    data: Buffer.concat([
      Buffer.from([3]), // Upgrade instruction
      programData
    ])
  };

  const transaction = new Transaction().add(upgradeInstruction);

  console.log('\nüì§ Envoi de la transaction de mise √† jour...');

  try {
    const signature = await sendAndConfirmTransaction(
      connection,
      transaction,
      [authority],
      {
        commitment: 'confirmed',
        skipPreflight: false
      }
    );

    console.log('‚úÖ D√©ploiement r√©ussi!');
    console.log(`   Signature: ${signature}`);
    console.log(`   Programme: ${PROGRAM_ID.toBase58()}`);
    console.log('\nüéØ Programme buyback maintenant compatible Token-2022!');

  } catch (error) {
    console.error('‚ùå Erreur d√©ploiement:', error.message);

    if (error.message.includes('insufficient funds')) {
      console.log('\nüí° Solution: Obtenez plus de SOL');
      console.log('   solana airdrop 5');
    } else {
      console.log('\nüí° Alternative: Utilisez Solana CLI directement');
      console.log(`   solana program deploy --program-id ${programKeypairPath} ${programSoPath}`);
    }
  }
}

deployProgram().catch(console.error);