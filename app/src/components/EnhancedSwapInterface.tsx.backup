/**
 * Enhanced SwapInterface Component
 * Uses Zustand state management + WebSocket real-time updates
 */

"use client";

import { useState, useEffect, useCallback } from "react";
import { useWallet } from "@solana/wallet-adapter-react";
import { useSwapStore } from "@/store/swapStore";
import { useSwapWebSocket } from "@/hooks/useSwapWebSocket";
import { ConnectionStatus } from "./ConnectionStatus";
import { TokenSelector } from "./TokenSelector";
import { debounce } from "lodash";

// ============================================================================
// TYPES
// ============================================================================

interface Token {
  mint: string;
  symbol: string;
  name: string;
  decimals: number;
  logoURI?: string;
  balance?: number;
}

// Popular Solana tokens
const POPULAR_TOKENS: Token[] = [
  {
    mint: "So11111111111111111111111111111111111111112",
    symbol: "SOL",
    name: "Solana",
    decimals: 9,
    logoURI: "/tokens/sol.png",
  },
  {
    mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
    symbol: "USDC",
    name: "USD Coin",
    decimals: 6,
    logoURI: "/tokens/usdc.png",
  },
  {
    mint: "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
    symbol: "USDT",
    name: "Tether USD",
    decimals: 6,
    logoURI: "/tokens/usdt.png",
  },
  {
    mint: "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN",
    symbol: "JUP",
    name: "Jupiter",
    decimals: 6,
    logoURI: "/tokens/jup.png",
  },
];

// ============================================================================
// COMPONENT
// ============================================================================

export function EnhancedSwapInterface() {
  const { connected, publicKey } = useWallet();
  const {
    swap,
    routes,
    setInputToken,
    setOutputToken,
    setInputAmount,
    setSlippageTolerance,
    setUseMEVProtection,
    setPriorityLevel,
    switchTokens,
    fetchRoutes,
    selectRoute,
  } = useSwapStore();

  // WebSocket connection
  useSwapWebSocket();

  // Local UI state
  const [showInputTokenSelector, setShowInputTokenSelector] = useState(false);
  const [showOutputTokenSelector, setShowOutputTokenSelector] = useState(false);
  const [showSlippageModal, setShowSlippageModal] = useState(false);
  const [customSlippage, setCustomSlippage] = useState("");
  const [selectedRouter, setSelectedRouter] = useState<"swapback" | "jupiter">("swapback");
  const [hasSearchedRoute, setHasSearchedRoute] = useState(false);

  // Auto-fetch routes when input changes (debounced)
  const debouncedFetchRoutes = useCallback(
    debounce(() => {
      if (swap.inputToken && swap.outputToken && swap.inputAmount) {
        fetchRoutes();
      }
    }, 500),
    [swap.inputToken, swap.outputToken, swap.inputAmount]
  );

  useEffect(() => {
    debouncedFetchRoutes();
    return () => debouncedFetchRoutes.cancel();
  }, [debouncedFetchRoutes]);

  // Calculate price impact
  const priceImpact = routes.selectedRoute
    ? Math.abs(
        ((typeof routes.selectedRoute.expectedOutput === "string"
          ? parseFloat(routes.selectedRoute.expectedOutput)
          : routes.selectedRoute.expectedOutput) /
          (parseFloat(swap.inputAmount) * 100)) *
          100 -
          100
      )
    : 0;

  const priceImpactColor =
    priceImpact > 5
      ? "text-red-500"
      : priceImpact > 1
        ? "text-yellow-500"
        : "text-green-500";

  // Handle token selection
  const handleInputTokenSelect = (token: Token) => {
    setInputToken(token);
    setShowInputTokenSelector(false);
  };

  const handleOutputTokenSelect = (token: Token) => {
    setOutputToken(token);
    setShowOutputTokenSelector(false);
  };

  // Handle slippage preset
  const handleSlippagePreset = (value: number) => {
    setSlippageTolerance(value);
    setShowSlippageModal(false);
  };

  // Handle custom slippage
  const handleCustomSlippage = () => {
    const value = parseFloat(customSlippage);
    if (!isNaN(value) && value > 0 && value <= 50) {
      setSlippageTolerance(value / 100);
      setShowSlippageModal(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto bg-gray-900 rounded-2xl p-6 shadow-xl">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-white">Swap</h2>
        <button
          onClick={() => setShowSlippageModal(true)}
          className="px-3 py-1 bg-gray-800 hover:bg-gray-700 rounded-lg text-sm text-gray-300"
        >
          Slippage: {(swap.slippageTolerance * 100).toFixed(2)}%
        </button>
      </div>

      {/* Input Token */}
      <div className="mb-4 p-4 bg-gray-800 rounded-xl">
        <div className="flex justify-between mb-2">
          <span className="text-sm text-gray-400">You pay</span>
          {swap.inputToken?.balance !== undefined && (
            <span className="text-sm text-gray-400">
              Balance: {swap.inputToken.balance.toFixed(4)}
            </span>
          )}
        </div>
        <div className="flex items-center gap-3">
          <input
            type="number"
            value={swap.inputAmount}
            onChange={(e) => setInputAmount(e.target.value)}
            placeholder="0.00"
            className="flex-1 bg-transparent text-3xl text-white outline-none"
            disabled={!connected}
          />
          <button
            onClick={() => setShowInputTokenSelector(true)}
            className="flex items-center gap-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg"
          >
            {swap.inputToken ? (
              <>
                {swap.inputToken.logoURI && (
                  <img
                    src={swap.inputToken.logoURI}
                    alt={swap.inputToken.symbol}
                    className="w-6 h-6 rounded-full"
                  />
                )}
                <span className="text-white font-semibold">
                  {swap.inputToken.symbol}
                </span>
              </>
            ) : (
              <span className="text-gray-400">Select token</span>
            )}
          </button>
        </div>
      </div>

      {/* Switch Button */}
      <div className="flex justify-center -my-2 relative z-10">
        <button
          onClick={switchTokens}
          className="p-2 bg-gray-700 hover:bg-gray-600 rounded-full"
          disabled={!connected}
        >
          <svg
            className="w-6 h-6 text-white"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"
            />
          </svg>
        </button>
      </div>

      {/* Output Token */}
      <div className="mb-4 p-4 bg-gray-800 rounded-xl">
        <div className="flex justify-between mb-2">
          <span className="text-sm text-gray-400">You receive</span>
          {swap.outputToken?.balance !== undefined && (
            <span className="text-sm text-gray-400">
              Balance: {swap.outputToken.balance.toFixed(4)}
            </span>
          )}
        </div>
        <div className="flex items-center gap-3">
          <input
            type="text"
            value={routes.selectedRoute?.expectedOutput || "0.00"}
            placeholder="0.00"
            className="flex-1 bg-transparent text-3xl text-white outline-none"
            disabled
          />
          <button
            onClick={() => setShowOutputTokenSelector(true)}
            className="flex items-center gap-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg"
          >
            {swap.outputToken ? (
              <>
                {swap.outputToken.logoURI && (
                  <img
                    src={swap.outputToken.logoURI}
                    alt={swap.outputToken.symbol}
                    className="w-6 h-6 rounded-full"
                  />
                )}
                <span className="text-white font-semibold">
                  {swap.outputToken.symbol}
                </span>
              </>
            ) : (
              <span className="text-gray-400">Select token</span>
            )}
          </button>
        </div>
      </div>

      {/* Route Info */}
      {routes.selectedRoute && (
        <div className="mb-4 p-4 bg-gray-800 rounded-xl space-y-2">
          <div className="flex justify-between text-sm">
            <span className="text-gray-400">Price impact</span>
            <span className={priceImpactColor}>{priceImpact.toFixed(2)}%</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-400">Route</span>
            <span className="text-white">
              {routes.selectedRoute.venues.join(" â†’ ")}
            </span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-400">MEV Risk</span>
            <span className="text-white">{routes.selectedRoute.mevRisk}</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-400">Est. time</span>
            <span className="text-white">
              {(routes.selectedRoute as any).estimatedTime ||
                routes.selectedRoute.estimatedComputeUnits / 100}
              ms
            </span>
          </div>
        </div>
      )}

      {/* MEV Protection Toggle */}
      <div className="mb-4 flex items-center justify-between p-4 bg-gray-800 rounded-xl">
        <div>
          <span className="text-white font-semibold">MEV Protection</span>
          <p className="text-xs text-gray-400 mt-1">
            Protect against front-running via Jito bundles
          </p>
        </div>
        <button
          onClick={() => setUseMEVProtection(!swap.useMEVProtection)}
          className={`relative w-12 h-6 rounded-full transition-colors ${
            swap.useMEVProtection ? "bg-green-500" : "bg-gray-600"
          }`}
        >
          <div
            className={`absolute top-1 left-1 w-4 h-4 bg-white rounded-full transition-transform ${
              swap.useMEVProtection ? "transform translate-x-6" : ""
            }`}
          />
        </button>
      </div>

      {/* Priority Level */}
      <div className="mb-4">
        <span className="text-sm text-gray-400 mb-2 block">Priority</span>
        <div className="grid grid-cols-3 gap-2">
          {(["low", "medium", "high"] as const).map((level) => (
            <button
              key={level}
              onClick={() => setPriorityLevel(level)}
              className={`px-4 py-2 rounded-lg capitalize ${
                swap.priorityLevel === level
                  ? "bg-blue-600 text-white"
                  : "bg-gray-800 text-gray-400 hover:bg-gray-700"
              }`}
            >
              {level}
            </button>
          ))}
        </div>
      </div>

      {/* Swap Button */}
      <button
        onClick={() => {
          /* TODO: Execute swap */
        }}
        disabled={!connected || routes.isLoading || !routes.selectedRoute}
        className="w-full py-4 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-700 disabled:text-gray-500 text-white font-bold rounded-xl transition-colors"
      >
        {!connected
          ? "Connect Wallet"
          : routes.isLoading
            ? "Finding routes..."
            : !routes.selectedRoute
              ? "Enter amount"
              : "Swap"}
      </button>

      {/* Slippage Modal */}
      {showSlippageModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-900 rounded-2xl p-6 max-w-sm w-full mx-4">
            <h3 className="text-xl font-bold text-white mb-4">
              Slippage Settings
            </h3>
            <div className="grid grid-cols-3 gap-2 mb-4">
              {[0.1, 0.5, 1.0].map((value) => (
                <button
                  key={value}
                  onClick={() => handleSlippagePreset(value / 100)}
                  className="px-4 py-2 bg-gray-800 hover:bg-gray-700 rounded-lg text-white"
                >
                  {value}%
                </button>
              ))}
            </div>
            <div className="mb-4">
              <input
                type="number"
                value={customSlippage}
                onChange={(e) => setCustomSlippage(e.target.value)}
                placeholder="Custom %"
                className="w-full px-4 py-2 bg-gray-800 text-white rounded-lg outline-none"
              />
            </div>
            <div className="flex gap-2">
              <button
                onClick={handleCustomSlippage}
                className="flex-1 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg"
              >
                Apply
              </button>
              <button
                onClick={() => setShowSlippageModal(false)}
                className="flex-1 py-2 bg-gray-800 hover:bg-gray-700 text-white rounded-lg"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Token Selectors (simplified - should be separate components) */}
      {/* TODO: Create proper TokenSelector component with search */}
    </div>
  );
}
