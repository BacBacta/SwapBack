#!/usr/bin/env node

// Script de d√©ploiement du programme buyback avec support Token-2022
// Utilise les APIs Node.js Solana disponibles

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ D√©ploiement du programme buyback avec support Token-2022...\n');

// Chemins des fichiers
const programKeypairPath = path.join(__dirname, 'target/deploy/swapback_buyback-keypair.json');
const programSoPath = path.join(__dirname, 'target/deploy/swapback_buyback.so');

// V√©rifier que les fichiers existent
if (!fs.existsSync(programKeypairPath)) {
  console.error('‚ùå Keypair non trouv√©e:', programKeypairPath);
  process.exit(1);
}

if (!fs.existsSync(programSoPath)) {
  console.error('‚ùå Binaire non trouv√©:', programSoPath);
  process.exit(1);
}

console.log('‚úÖ Fichiers de d√©ploiement trouv√©s');

// Charger la keypair
let programKeypair;
try {
  programKeypair = JSON.parse(fs.readFileSync(programKeypairPath, 'utf8'));
  console.log('‚úÖ Keypair charg√©e');
} catch (error) {
  console.error('‚ùå Erreur lors du chargement de la keypair:', error.message);
  process.exit(1);
}

// Pour le d√©ploiement, nous aurions besoin de Solana CLI ou d'une API
// Comme nous n'avons pas acc√®s direct √† Solana CLI dans ce conteneur,
// nous allons cr√©er un script qui peut √™tre ex√©cut√© manuellement

console.log('\nüìã Instructions de d√©ploiement manuel:');
console.log('=====================================');
console.log('');
console.log('1. Assurez-vous que Solana CLI est install√© et configur√© pour devnet:');
console.log('   solana config set --url https://api.devnet.solana.com');
console.log('');
console.log('2. V√©rifiez votre solde (minimum 5 SOL recommand√©):');
console.log('   solana balance');
console.log('');
console.log('3. Si besoin, demandez un airdrop:');
console.log('   solana airdrop 5');
console.log('');
console.log('4. D√©ployez le programme:');
console.log(`   solana program deploy --program-id ${programKeypairPath} ${programSoPath}`);
console.log('');
console.log('5. V√©rifiez le d√©ploiement:');
console.log('   solana program show <PROGRAM_ID>');
console.log('');

console.log('üéØ Programme ID attendu apr√®s d√©ploiement:');
console.log('EoVjmALZdkU3N9uehxVV4n9C6ukRa8QrbZRMHKBD2KUf');
console.log('');

console.log('‚ö†Ô∏è  Note: Le programme buyback a √©t√© modifi√© pour supporter Token-2022.');
console.log('   Assurez-vous que le d√©ploiement r√©ussit avant de proc√©der aux tests.');

// Cr√©er un script de d√©ploiement pr√™t √† ex√©cuter
const deployScript = `#!/bin/bash
# Script de d√©ploiement du programme buyback
set -e

echo "üöÄ D√©ploiement programme buyback avec support Token-2022..."

# Configuration devnet
solana config set --url https://api.devnet.solana.com

# V√©rifier solde
BALANCE=$(solana balance | awk '{print $1}')
echo "Solde actuel: $BALANCE SOL"

if (( $(echo "$BALANCE < 2.0" | bc -l) )); then
  echo "Demande d'airdrop..."
  solana airdrop 5
fi

# D√©ploiement
echo "D√©ploiement du programme..."
solana program deploy --program-id target/deploy/swapback_buyback-keypair.json target/deploy/swapback_buyback.so

echo "‚úÖ D√©ploiement termin√©!"
echo "Programme ID: EoVjmALZdkU3N9uehxVV4n9C6ukRa8QrbZRMHKBD2KUf"
`;

fs.writeFileSync('deploy-buyback.sh', deployScript);
fs.chmodSync('deploy-buyback.sh', '755');

console.log('üìÑ Script de d√©ploiement cr√©√©: deploy-buyback.sh');
console.log('   Ex√©cutez: ./deploy-buyback.sh');