#!/bin/bash

# Script de cr√©ation du token $BACK sur Devnet
# Token-2022 avec Transfer Hook pour burn automatique

set -e

echo "üí∞ Cr√©ation du Token \$BACK sur Devnet"
echo "======================================="
echo ""

# V√©rifier la connexion devnet
echo "üîç V√©rification configuration Solana..."
CLUSTER=$(solana config get | grep "RPC URL" | awk '{print $3}')
echo "Cluster actuel: $CLUSTER"

if [[ ! "$CLUSTER" =~ "devnet" ]]; then
    echo "‚ö†Ô∏è  Configuration vers devnet..."
    solana config set --url devnet
fi

# V√©rifier le balance
echo ""
echo "üí≥ V√©rification du balance..."
WALLET=$(solana address)
BALANCE=$(solana balance)
echo "Wallet: $WALLET"
echo "Balance: $BALANCE"

# Airdrop si n√©cessaire
BALANCE_NUM=$(echo $BALANCE | cut -d' ' -f1)
if (( $(echo "$BALANCE_NUM < 2" | bc -l) )); then
    echo "üí∏ Airdrop de 2 SOL..."
    solana airdrop 2 || echo "‚ö†Ô∏è  Airdrop √©chou√© (rate limit possible), continuons..."
    sleep 2
fi

echo ""
echo "üî® Cr√©ation du mint $BACK (Token-2022)..."

# Cr√©er le token avec Token-2022 (supporte les extensions)
# Note: Pour l'instant sans Transfer Hook (simplifi√©)
# Le Transfer Hook sera ajout√© plus tard apr√®s r√©solution du programme

TOKEN_MINT=$(spl-token create-token \
    --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb \
    --decimals 9 \
    2>&1 | grep "Creating token" | awk '{print $3}')

if [ -z "$TOKEN_MINT" ]; then
    echo "‚ùå Erreur lors de la cr√©ation du token"
    exit 1
fi

echo "‚úÖ Token $BACK cr√©√©: $TOKEN_MINT"

# Cr√©er le compte de token pour le wallet
echo ""
echo "üì¶ Cr√©ation du compte de token..."
spl-token create-account $TOKEN_MINT

# Mint supply initial pour tests (1 million de tokens)
echo ""
echo "‚ö° Mint de 1,000,000 $BACK pour tests..."
spl-token mint $TOKEN_MINT 1000000 \
    --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb

# V√©rifier le supply
echo ""
echo "üìä Informations du token:"
spl-token supply $TOKEN_MINT --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb

# Sauvegarder les informations
echo ""
echo "üíæ Sauvegarde des informations..."
cat > token-back-devnet.json <<EOF
{
  "name": "SwapBack Token",
  "symbol": "BACK",
  "decimals": 9,
  "mint": "$TOKEN_MINT",
  "program": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
  "network": "devnet",
  "supply_initial": 1000000,
  "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "creator": "$WALLET"
}
EOF

cat token-back-devnet.json

echo ""
echo "‚úÖ Token \$BACK cr√©√© avec succ√®s sur Devnet !"
echo ""
echo "üìù Informations sauvegard√©es dans: token-back-devnet.json"
echo ""
echo "üîó Mint Address: $TOKEN_MINT"
echo "üåê Explorer: https://explorer.solana.com/address/$TOKEN_MINT?cluster=devnet"
echo ""
echo "üìã Prochaines √©tapes:"
echo "   1. Mettre √† jour les constantes dans le code"
echo "   2. Cr√©er des pools de liquidit√© (BACK/USDC, BACK/SOL)"
echo "   3. Tester le lock/unlock avec le vrai token"
