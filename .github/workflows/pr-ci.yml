name: CI/CD - Pull Request

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: 📝 Check TypeScript types
        run: npx tsc --noEmit
        working-directory: ./app
        continue-on-error: false

      - name: 💅 Check code formatting (Prettier)
        run: |
          npm run format:check || echo "⚠️ Code formatting issues detected"
        continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run npm audit
        run: |
          npm audit --production --audit-level=high || echo "⚠️ Vulnerabilities found"
        continue-on-error: true

      - name: 🛡️ OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'SwapBack'
          path: '.'
          format: 'HTML'
          out: 'dependency-check-report'
        continue-on-error: true

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: dependency-check-report/
          retention-days: 7

  # Job 3: Unit & Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm test -- --coverage --reporter=verbose
        env:
          CI: true

      - name: 📊 Generate coverage report
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          npm test -- --coverage --reporter=json | grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*' | head -1 | awk -F'[:,]' '{print "Statements: " int(($4/$2)*100) "%"}' >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-pr-${{ github.event.pull_request.number }}
        continue-on-error: true

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Job 4: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]

    strategy:
      matrix:
        target: [app, sdk]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build ${{ matrix.target }}
        run: npm run build
        working-directory: ./${{ matrix.target }}

      - name: 📏 Check bundle size (app only)
        if: matrix.target == 'app'
        run: |
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          du -sh .next/ >> $GITHUB_STEP_SUMMARY
        working-directory: ./app

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: ./${{ matrix.target }}/.next
          retention-days: 7
        if: matrix.target == 'app'

  # Job 5: Rust/Anchor Build (Solana Programs)
  build-programs:
    name: Build Solana Programs
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: ☀️ Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.22/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: ⚓ Install Anchor CLI
        run: |
          cargo install --git https://github.com/coral-xyz/anchor --tag v0.30.1 anchor-cli --locked --force

      - name: 🔍 Run cargo fmt check
        run: cargo fmt -- --check
        continue-on-error: true

      - name: 🔍 Run cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        continue-on-error: true

      - name: 🏗️ Build Anchor programs
        run: anchor build

      - name: ✅ Verify program builds
        run: |
          echo "## Solana Programs Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          ls -lh target/deploy/*.so >> $GITHUB_STEP_SUMMARY

  # Job 6: PR Summary Comment
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [quality, security, test, build, build-programs]
    if: always()
    permissions:
      pull-requests: write

    steps:
      - name: 📝 Create PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🤖 CI/CD Pipeline Summary')
            );
            
            const summary = `## 🤖 CI/CD Pipeline Summary
            
            **PR #${{ github.event.pull_request.number }}** - \`${{ github.event.pull_request.title }}\`
            
            | Job | Status |
            |-----|--------|
            | 🔍 Code Quality | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🔒 Security Scan | ${{ needs.security.result == 'success' && '✅ Passed' || '⚠️ Check warnings' }} |
            | 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | ⚓ Programs | ${{ needs.build-programs.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            
            **Overall Status**: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.build-programs.result == 'success' && '✅ Ready to merge' || '❌ Needs fixes' }}
            
            <details>
            <summary>📊 Detailed Reports</summary>
            
            - 📦 [Test Coverage Report](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.pull_request.number }})
            - 🔒 Security scan artifacts available in workflow run
            - 🏗️ Build artifacts available for 7 days
            
            </details>
            
            ---
            *Last updated: ${{ new Date().toISOString() }}*
            `;
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
